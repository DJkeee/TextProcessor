package org.example.data_classes

data class TextStats(
    val wordCount: Int,
    val charCount: Int,
    val wordMeetingRate: Map<String, Int>,
    val memoryUsed: Int,
    val uniqueWordCount: Int
) {
    override fun toString(): String {
        val separator = "=".repeat(50)
        val topWords = getTopWords(10)

        return """
        |$separator
        |           –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ö–°–¢–ê
        |$separator
        |
        |üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
        |   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: $wordCount
        |   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: $charCount
        |   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: $uniqueWordCount
        |   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: ${"%.2f".format(memoryUsed / 1024.0)} –ö–ë
        |
        |üìà –¢–û–ü-10 –°–ê–ú–´–• –ß–ê–°–¢–´–• –°–õ–û–í:
        |${formatWordMap(topWords)}
        |
        |$separator
        """.trimMargin()
    }

    private fun formatWordMap(wordMap: Map<String, Int>): String {
        if (wordMap.isEmpty()) {
            return "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–∞—Ö"
        }

        val maxWordLength = wordMap.keys.maxOfOrNull { it.length } ?: 0
        val wordWidth = maxOf(maxWordLength, 8) + 2
        val countWidth = 8

        val header = "   ‚îå${"‚îÄ".repeat(wordWidth)}‚î¨${"‚îÄ".repeat(countWidth)}‚îê\n" +
                "   ‚îÇ ${"–°–õ–û–í–û".padEnd(wordWidth - 1)}‚îÇ ${"–ß–ê–°–¢–û–¢–ê".padEnd(countWidth - 1)}‚îÇ\n" +
                "   ‚îú${"‚îÄ".repeat(wordWidth)}‚îº${"‚îÄ".repeat(countWidth)}‚î§"

        val rows = wordMap.entries.joinToString("\n") { (word, count) ->
            "   ‚îÇ ${word.padEnd(wordWidth - 1)}‚îÇ ${count.toString().padEnd(countWidth - 1)}‚îÇ"
        }

        val footer = "   ‚îî${"‚îÄ".repeat(wordWidth)}‚î¥${"‚îÄ".repeat(countWidth)}‚îò"

        return "$header\n$rows\n$footer"
    }

    private fun getTopWords(limit: Int): Map<String, Int> {
        return wordMeetingRate.entries
            .sortedByDescending { it.value }
            .take(limit)
            .associate { it.key to it.value }
    }

    fun getFullStatistics(): String {
        val separator = "=".repeat(60)

        return """
        |$separator
        |           –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ö–°–¢–ê
        |$separator
        |
        |üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
        |   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: $wordCount
        |   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: $charCount
        |   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: $uniqueWordCount
        |   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: ${"%.2f".format(memoryUsed / 1024.0)} –ö–ë
        |   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: ${"%.1f".format(charCount.toDouble() / wordCount)} —Å–∏–º–≤–æ–ª–æ–≤
        |
        |üìà –ß–ê–°–¢–û–¢–ê –°–õ–û–í (–≤—Å–µ–≥–æ ${wordMeetingRate.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤):
        |${formatFullWordMap()}
        |
        |$separator
        """.trimMargin()
    }

    private fun formatFullWordMap(): String {
        if (wordMeetingRate.isEmpty()) {
            return "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–∞—Ö"
        }

        val sortedWords = wordMeetingRate.entries.sortedByDescending { it.value }
        val maxWordLength = sortedWords.maxOfOrNull { it.key.length } ?: 0
        val wordWidth = maxOf(maxWordLength, 12) + 2
        val countWidth = 10

        val header = "   ‚îå${"‚îÄ".repeat(wordWidth)}‚î¨${"‚îÄ".repeat(countWidth)}‚îê\n" +
                "   ‚îÇ ${"–°–õ–û–í–û".padEnd(wordWidth - 1)}‚îÇ ${"–í–°–¢–†–ï–ß–ê–ï–ú–û–°–¢–¨".padEnd(countWidth - 1)}‚îÇ\n" +
                "   ‚îú${"‚îÄ".repeat(wordWidth)}‚îº${"‚îÄ".repeat(countWidth)}‚î§"

        val rows = sortedWords.joinToString("\n") { (word, count) ->
            val percentage = "%.1f%%".format(count.toDouble() / wordCount * 100)
            "   ‚îÇ ${word.padEnd(wordWidth - 1)}‚îÇ ${"$count ($percentage)".padEnd(countWidth - 1)}‚îÇ"
        }

        val footer = "   ‚îî${"‚îÄ".repeat(wordWidth)}‚î¥${"‚îÄ".repeat(countWidth)}‚îò"

        return "$header\n$rows\n$footer"
    }
}