package org.example.data_classes

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞.
 *
 * –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, —Å–∏–º–≤–æ–ª–æ–≤, —á–∞—Å—Ç–æ—Ç—É –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ —Å–ª–æ–≤,
 * –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
 * –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü.
 *
 * @property wordCount –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
 * @property charCount –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
 * @property wordMeetingRate –∫–∞—Ä—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ —Å–ª–æ–≤ (—Å–ª–æ–≤–æ -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π)
 * @property memoryUsed –æ–±—ä–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö
 * @property uniqueWordCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
 *
 * @example
 * ```
 * val stats = TextStats(
 *     wordCount = 150,
 *     charCount = 1250,
 *     wordMeetingRate = mapOf("–ø—Ä–∏–≤–µ—Ç" to 5, "–º–∏—Ä" to 3),
 *     memoryUsed = 2048,
 *     uniqueWordCount = 100
 * )
 * println(stats) // –≤—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * println(stats.getFullStatistics()) // –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * ```
 */
data class TextStats(
    val wordCount: Int,
    val charCount: Int,
    val wordMeetingRate: Map<String, Int>,
    val memoryUsed: Int,
    val uniqueWordCount: Int
) {
    companion object {
        /** –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ */
        private const val MIN_WORD_COLUMN_WIDTH = 12

        /** –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ */
        private const val COUNT_WIDTH = 10
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫—Ä–∞—Ç–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
     *
     * –í–∫–ª—é—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ø-10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤.
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏.
     *
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç–µ–∫—Å—Ç–∞
     */
    override fun toString(): String {
        val separator = "=".repeat(50)
        val topWords = getTopWords(10)

        return """
        |$separator
        |           –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ö–°–¢–ê
        |$separator
        |
        |üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
        |   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: $wordCount
        |   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: $charCount
        |   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: $uniqueWordCount
        |   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: ${"%.2f".format(memoryUsed / 1024.0)} –ö–ë
        |
        |üìà –¢–û–ü-10 –°–ê–ú–´–• –ß–ê–°–¢–´–• –°–õ–û–í:
        |${formatWordMap(topWords)}
        |
        |$separator
        """.trimMargin()
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É —Å–ª–æ–≤ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã.
     *
     * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ "–°–õ–û–í–û" –∏ "–ß–ê–°–¢–û–¢–ê".
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
     *
     * @param wordMap –∫–∞—Ä—Ç–∞ —Å–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–ª–æ–≤–æ -> —á–∞—Å—Ç–æ—Ç–∞)
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å–ª–æ–≤
     */
    private fun formatWordMap(wordMap: Map<String, Int>): String {
        if (wordMap.isEmpty()) {
            return "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–∞—Ö"
        }

        val maxWordLength = wordMap.keys.maxOfOrNull { it.length } ?: 0
        val wordWidth = maxOf(maxWordLength, 8) + 2
        val countWidth = 8

        val header = "   ‚îå${"‚îÄ".repeat(wordWidth)}‚î¨${"‚îÄ".repeat(countWidth)}‚îê\n" +
                "   ‚îÇ ${"–°–õ–û–í–û".padEnd(wordWidth - 1)}‚îÇ ${"–ß–ê–°–¢–û–¢–ê".padEnd(countWidth - 1)}‚îÇ\n" +
                "   ‚îú${"‚îÄ".repeat(wordWidth)}‚îº${"‚îÄ".repeat(countWidth)}‚î§"

        val rows = wordMap.entries.joinToString("\n") { (word, count) ->
            "   ‚îÇ ${word.padEnd(wordWidth - 1)}‚îÇ ${count.toString().padEnd(countWidth - 1)}‚îÇ"
        }

        val footer = "   ‚îî${"‚îÄ".repeat(wordWidth)}‚î¥${"‚îÄ".repeat(countWidth)}‚îò"

        return "$header\n$rows\n$footer"
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤.
     *
     * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤.
     *
     * @param limit –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Å–ª–æ–≤
     * @return –∫–∞—Ä—Ç–∞ —Å –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–º–∏—Å—è —Å–ª–æ–≤–∞–º–∏ (—Å–ª–æ–≤–æ -> —á–∞—Å—Ç–æ—Ç–∞)
     */
    private fun getTopWords(limit: Int): Map<String, Int> {
        return wordMeetingRate.entries
            .sortedByDescending { it.value }
            .take(limit)
            .associate { it.key to it.value }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
     *
     * –í–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤–∫–ª—é—á–∞—è —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞) –∏ –ø–æ–ª–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
     * –≤—Å–µ—Ö —Å–ª–æ–≤ —Å –∏—Ö —á–∞—Å—Ç–æ—Ç–æ–π –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º.
     *
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç–µ–∫—Å—Ç–∞
     */
    fun getFullStatistics(): String {
        val separator = "=".repeat(60)

        return """
        |$separator
        |           –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ö–°–¢–ê
        |$separator
        |
        |üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
        |   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: $wordCount
        |   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: $charCount
        |   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: $uniqueWordCount
        |   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: ${"%.2f".format(memoryUsed / 1024.0)} –ö–ë
        |   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: ${"%.1f".format(charCount.toDouble() / wordCount)} —Å–∏–º–≤–æ–ª–æ–≤
        |
        |üìà –ß–ê–°–¢–û–¢–ê –°–õ–û–í (–≤—Å–µ–≥–æ ${wordMeetingRate.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤):
        |${formatFullWordMap()}
        |
        |$separator
        """.trimMargin()
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç—É —Å–ª–æ–≤ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º.
     *
     * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏—Ö –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –∏
     * –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤. –°–ª–æ–≤–∞ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç—ã.
     *
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π —Å–ª–æ–≤
     */
    private fun formatFullWordMap(): String {
        if (wordMeetingRate.isEmpty()) {
            return "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–∞—Ö"
        }

        val sortedWords = wordMeetingRate.entries.sortedByDescending { it.value }
        val maxWordLength = sortedWords.maxOfOrNull { it.key.length } ?: 0
        val wordWidth = maxOf(maxWordLength, MIN_WORD_COLUMN_WIDTH) + 2

        val header = "   ‚îå${"‚îÄ".repeat(wordWidth)}‚î¨${"‚îÄ".repeat(COUNT_WIDTH)}‚îê\n" +
                "   ‚îÇ ${"–°–õ–û–í–û".padEnd(wordWidth - 1)}‚îÇ ${"–í–°–¢–†–ï–ß–ê–ï–ú–û–°–¢–¨".padEnd(COUNT_WIDTH - 1)}‚îÇ\n" +
                "   ‚îú${"‚îÄ".repeat(wordWidth)}‚îº${"‚îÄ".repeat(COUNT_WIDTH)}‚î§"

        val rows = sortedWords.joinToString("\n") { (word, count) ->
            val percentage = "%.1f%%".format(count.toDouble() / wordCount * 100)
            "   ‚îÇ ${word.padEnd(wordWidth - 1)}‚îÇ ${"$count ($percentage)".padEnd(COUNT_WIDTH - 1)}‚îÇ"
        }

        val footer = "   ‚îî${"‚îÄ".repeat(wordWidth)}‚î¥${"‚îÄ".repeat(COUNT_WIDTH)}‚îò"

        return "$header\n$rows\n$footer"
    }
}