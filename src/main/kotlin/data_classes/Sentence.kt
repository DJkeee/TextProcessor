package org.example.data_classes

/**
 * Класс, представляющий предложение для лингвистического анализа.
 *
 * Предоставляет функциональность для разбиения предложения на отдельные слова
 * с предварительной нормализацией и очисткой от нежелательных символов.
 *
 * @property sentence исходный текст предложения
 */
data class Sentence(val sentence: String) {

    companion object {
        /**
         * Регулярное выражение для фильтрации небуквенных символов.
         * Удаляет все символы, кроме букв, цифр, пробелов, апострофов и дефисов,
         * но только когда они являются частью слова.
         */
        private val WORD_PARSING_REGEX_PATTERN = Regex("""[^\p{L}\p{N}\s'-]|(?<!\p{L})['-]|['-](?!\p{L})""")

        /**
         * Регулярное выражение для разбиения текста по пробельным символам.
         * Обрабатывает множественные пробелы как один разделитель.
         */
        private val SPACE_REGEX_PARTITION = Regex("\\s+")
    }

    /**
     * Разбивает предложение на нормализованные слова.
     *
     * Выполняет очистку текста от лишних символов, разбиение на слова по пробелам,
     * фильтрацию пустых элементов и приведение слов к нормализованному виду
     * (первая буква заглавная, остальные строчные).
     *
     * @return список объектов [Word], представляющих нормализованные слова предложения
     *
     * @example
     * ```
     * Sentence("Привет, мир! Как дела?").words()
     * // возвращает: [Word("Привет"), Word("Мир"), Word("Как"), Word("Дела")]
     * ```
     */
    fun words(): List<Word> {
        return normalizeSentence()
    }

    /**
     * Нормализует предложение и разбивает на слова.
     *
     * Внутренний метод, который:
     * 1. Заменяет нежелательные символы на пробелы
     * 2. Разбивает текст по пробельным символам
     * 3. Фильтрует пустые строки
     * 4. Обрезает пробелы вокруг слов
     * 5. Приводит первую букву каждого слова к верхнему регистру
     *
     * @return список нормализованных слов
     */
    private fun normalizeSentence(): List<Word> {
        val cleanedSentence = WORD_PARSING_REGEX_PATTERN.replace(sentence, " ")
        return cleanedSentence.split(SPACE_REGEX_PARTITION)
            .filter { it.isNotBlank() }
            .map { it.trim() }
            .map { it.replaceFirstChar { it.uppercase() } }
            .map { Word(it) }
    }
}